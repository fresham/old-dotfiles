#!/usr/bin/env ruby
require 'fileutils'

@port = 8000
@pidfile = File.join( '/', 'tmp', 'socks_sshd.pid' )
@identity_file = File.join( ENV['HOME'], '.ssh', 'EC2.pem' )

@default_location = 'Default'
@socks_location = 'SOCKS Proxy'

def start_daemon
  return if status == :on
  new_pid = spawn( "ssh -D #{@port} -CqN ubuntu@fresham.me -i #{@identity_file}" )
  File.write( @pidfile, new_pid )
end

def stop_daemon
  Process.kill( 'QUIT', current_pid ) if status == :on
  clear_pidfile
end

def error( message )
  abort "ERROR: #{message}"
end

def info( message )
  puts "INFO: #{message}"
end

def status
  daemon_running? ? :on : :off
end

def daemon_running?
  raise Errno::ESRCH if current_pid.zero?
  Process.kill( 0, current_pid )
  true
rescue Errno::ESRCH,  # invalid or no such process
       Errno::EPERM,  # insuffecient permissions
       Errno::ENOENT  # no PID file (current_pid)
  clear_pidfile
  false
end

def clear_pidfile
  FileUtils.rm @pidfile if File.exists? @pidfile
end

def current_pid
  File.read( @pidfile ).to_i
end

def current_location
  %x( networksetup -getcurrentlocation ).chomp
end

def switch_to_location( location )
  %x( networksetup -switchtolocation "#{location}" )
end

case ARGV.first
when 'on'
  start_daemon
  switch_to_location @socks_location
when 'off'
  switch_to_location @default_location
  stop_daemon
when 'status', nil
  display_status = status == :on ? "Running [#{current_pid}]" : 'Stopped'
  puts display_status, "Location: #{current_location}"
else
  error 'Argument should be `on`, `off`, or `status`.'
end
